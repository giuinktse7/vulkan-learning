// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Area_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapFile_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Npc_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinate_shared_2eproto;
namespace tibia {
namespace protobuf {
namespace map {
class MapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map> _instance;
} _Map_default_instance_;
class AreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Area> _instance;
} _Area_default_instance_;
class NpcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Npc> _instance;
} _Npc_default_instance_;
class MapFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapFile> _instance;
} _MapFile_default_instance_;
}  // namespace map
}  // namespace protobuf
}  // namespace tibia
static void InitDefaultsscc_info_Area_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tibia::protobuf::map::_Area_default_instance_;
    new (ptr) ::tibia::protobuf::map::Area();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tibia::protobuf::map::Area::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Area_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Area_map_2eproto}, {
      &scc_info_Coordinate_shared_2eproto.base,}};

static void InitDefaultsscc_info_Map_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tibia::protobuf::map::_Map_default_instance_;
    new (ptr) ::tibia::protobuf::map::Map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tibia::protobuf::map::Map::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Map_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Map_map_2eproto}, {
      &scc_info_Area_map_2eproto.base,
      &scc_info_Npc_map_2eproto.base,
      &scc_info_MapFile_map_2eproto.base,
      &scc_info_Coordinate_shared_2eproto.base,}};

static void InitDefaultsscc_info_MapFile_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tibia::protobuf::map::_MapFile_default_instance_;
    new (ptr) ::tibia::protobuf::map::MapFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tibia::protobuf::map::MapFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapFile_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapFile_map_2eproto}, {
      &scc_info_Coordinate_shared_2eproto.base,}};

static void InitDefaultsscc_info_Npc_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tibia::protobuf::map::_Npc_default_instance_;
    new (ptr) ::tibia::protobuf::map::Npc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tibia::protobuf::map::Npc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Npc_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Npc_map_2eproto}, {
      &scc_info_Coordinate_shared_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_map_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Map, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Map, areas_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Map, npcs_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Map, resource_files_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Map, top_left_tile_coordinate_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Map, bottom_right_tile_coordinate_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Area, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Area, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Area, area_id_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Area, name_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Area, area_type_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Area, subarea_ids_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Area, label_coordinate_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Area, reject_donations_),
  2,
  0,
  3,
  ~0u,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Npc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Npc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Npc, name_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Npc, tile_coordinate_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::Npc, subarea_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::MapFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::MapFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::MapFile, file_type_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::MapFile, top_left_coordinate_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::MapFile, file_name_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::MapFile, fields_width_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::MapFile, fields_height_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::MapFile, area_id_),
  PROTOBUF_FIELD_OFFSET(::tibia::protobuf::map::MapFile, scale_factor_),
  2,
  1,
  0,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::tibia::protobuf::map::Map)},
  { 15, 26, sizeof(::tibia::protobuf::map::Area)},
  { 32, 40, sizeof(::tibia::protobuf::map::Npc)},
  { 43, 55, sizeof(::tibia::protobuf::map::MapFile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tibia::protobuf::map::_Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tibia::protobuf::map::_Area_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tibia::protobuf::map::_Npc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tibia::protobuf::map::_MapFile_default_instance_),
};

const char descriptor_table_protodef_map_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmap.proto\022\022tibia.protobuf.map\032\014shared."
  "proto\"\230\002\n\003Map\022\'\n\005areas\030\001 \003(\0132\030.tibia.pro"
  "tobuf.map.Area\022%\n\004npcs\030\002 \003(\0132\027.tibia.pro"
  "tobuf.map.Npc\0223\n\016resource_files\030\003 \003(\0132\033."
  "tibia.protobuf.map.MapFile\022C\n\030top_left_t"
  "ile_coordinate\030\004 \001(\0132!.tibia.protobuf.sh"
  "ared.Coordinate\022G\n\034bottom_right_tile_coo"
  "rdinate\030\005 \001(\0132!.tibia.protobuf.shared.Co"
  "ordinate\"\303\001\n\004Area\022\017\n\007area_id\030\001 \001(\r\022\014\n\004na"
  "me\030\002 \001(\t\0220\n\tarea_type\030\003 \001(\0162\035.tibia.prot"
  "obuf.map.AREA_TYPE\022\023\n\013subarea_ids\030\004 \003(\r\022"
  ";\n\020label_coordinate\030\005 \001(\0132!.tibia.protob"
  "uf.shared.Coordinate\022\030\n\020reject_donations"
  "\030\006 \001(\010\"c\n\003Npc\022\014\n\004name\030\001 \001(\t\022:\n\017tile_coor"
  "dinate\030\002 \001(\0132!.tibia.protobuf.shared.Coo"
  "rdinate\022\022\n\nsubarea_id\030\003 \001(\r\"\346\001\n\007MapFile\022"
  "4\n\tfile_type\030\001 \001(\0162!.tibia.protobuf.map."
  "MAP_FILE_TYPE\022>\n\023top_left_coordinate\030\002 \001"
  "(\0132!.tibia.protobuf.shared.Coordinate\022\021\n"
  "\tfile_name\030\003 \001(\t\022\024\n\014fields_width\030\004 \001(\r\022\025"
  "\n\rfields_height\030\005 \001(\r\022\017\n\007area_id\030\006 \001(\r\022\024"
  "\n\014scale_factor\030\007 \001(\001*b\n\rMAP_FILE_TYPE\022\031\n"
  "\025MAP_FILE_TYPE_SUBAREA\020\000\022\033\n\027MAP_FILE_TYP"
  "E_SATELLITE\020\001\022\031\n\025MAP_FILE_TYPE_MINIMAP\020\002"
  "*J\n\tAREA_TYPE\022\022\n\016AREA_TYPE_NONE\020\000\022\022\n\016ARE"
  "A_TYPE_AREA\020\001\022\025\n\021AREA_TYPE_SUBAREA\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_2eproto_deps[1] = {
  &::descriptor_table_shared_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_2eproto_sccs[4] = {
  &scc_info_Area_map_2eproto.base,
  &scc_info_Map_map_2eproto.base,
  &scc_info_MapFile_map_2eproto.base,
  &scc_info_Npc_map_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_2eproto_once;
static bool descriptor_table_map_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto = {
  &descriptor_table_map_2eproto_initialized, descriptor_table_protodef_map_2eproto, "map.proto", 1036,
  &descriptor_table_map_2eproto_once, descriptor_table_map_2eproto_sccs, descriptor_table_map_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_map_2eproto::offsets,
  file_level_metadata_map_2eproto, 4, file_level_enum_descriptors_map_2eproto, file_level_service_descriptors_map_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_2eproto), true);
namespace tibia {
namespace protobuf {
namespace map {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MAP_FILE_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_map_2eproto);
  return file_level_enum_descriptors_map_2eproto[0];
}
bool MAP_FILE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AREA_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_map_2eproto);
  return file_level_enum_descriptors_map_2eproto[1];
}
bool AREA_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Map::InitAsDefaultInstance() {
  ::tibia::protobuf::map::_Map_default_instance_._instance.get_mutable()->top_left_tile_coordinate_ = const_cast< ::tibia::protobuf::shared::Coordinate*>(
      ::tibia::protobuf::shared::Coordinate::internal_default_instance());
  ::tibia::protobuf::map::_Map_default_instance_._instance.get_mutable()->bottom_right_tile_coordinate_ = const_cast< ::tibia::protobuf::shared::Coordinate*>(
      ::tibia::protobuf::shared::Coordinate::internal_default_instance());
}
class Map::_Internal {
 public:
  using HasBits = decltype(std::declval<Map>()._has_bits_);
  static const ::tibia::protobuf::shared::Coordinate& top_left_tile_coordinate(const Map* msg);
  static void set_has_top_left_tile_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tibia::protobuf::shared::Coordinate& bottom_right_tile_coordinate(const Map* msg);
  static void set_has_bottom_right_tile_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tibia::protobuf::shared::Coordinate&
Map::_Internal::top_left_tile_coordinate(const Map* msg) {
  return *msg->top_left_tile_coordinate_;
}
const ::tibia::protobuf::shared::Coordinate&
Map::_Internal::bottom_right_tile_coordinate(const Map* msg) {
  return *msg->bottom_right_tile_coordinate_;
}
void Map::clear_top_left_tile_coordinate() {
  if (top_left_tile_coordinate_ != nullptr) top_left_tile_coordinate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Map::clear_bottom_right_tile_coordinate() {
  if (bottom_right_tile_coordinate_ != nullptr) bottom_right_tile_coordinate_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Map::Map()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.map.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      areas_(from.areas_),
      npcs_(from.npcs_),
      resource_files_(from.resource_files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_top_left_tile_coordinate()) {
    top_left_tile_coordinate_ = new ::tibia::protobuf::shared::Coordinate(*from.top_left_tile_coordinate_);
  } else {
    top_left_tile_coordinate_ = nullptr;
  }
  if (from._internal_has_bottom_right_tile_coordinate()) {
    bottom_right_tile_coordinate_ = new ::tibia::protobuf::shared::Coordinate(*from.bottom_right_tile_coordinate_);
  } else {
    bottom_right_tile_coordinate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.map.Map)
}

void Map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_map_2eproto.base);
  ::memset(&top_left_tile_coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_right_tile_coordinate_) -
      reinterpret_cast<char*>(&top_left_tile_coordinate_)) + sizeof(bottom_right_tile_coordinate_));
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.map.Map)
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != internal_default_instance()) delete top_left_tile_coordinate_;
  if (this != internal_default_instance()) delete bottom_right_tile_coordinate_;
}

void Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map& Map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_map_2eproto.base);
  return *internal_default_instance();
}


void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:tibia.protobuf.map.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  areas_.Clear();
  npcs_.Clear();
  resource_files_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(top_left_tile_coordinate_ != nullptr);
      top_left_tile_coordinate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bottom_right_tile_coordinate_ != nullptr);
      bottom_right_tile_coordinate_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tibia.protobuf.map.Area areas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_areas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tibia.protobuf.map.Npc npcs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_npcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tibia.protobuf.map.MapFile resource_files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .tibia.protobuf.shared.Coordinate top_left_tile_coordinate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_left_tile_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tibia.protobuf.shared.Coordinate bottom_right_tile_coordinate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_right_tile_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.map.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tibia.protobuf.map.Area areas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_areas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_areas(i), target, stream);
  }

  // repeated .tibia.protobuf.map.Npc npcs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_npcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_npcs(i), target, stream);
  }

  // repeated .tibia.protobuf.map.MapFile resource_files = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_resource_files(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .tibia.protobuf.shared.Coordinate top_left_tile_coordinate = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::top_left_tile_coordinate(this), target, stream);
  }

  // optional .tibia.protobuf.shared.Coordinate bottom_right_tile_coordinate = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bottom_right_tile_coordinate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.map.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tibia.protobuf.map.Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tibia.protobuf.map.Area areas = 1;
  total_size += 1UL * this->_internal_areas_size();
  for (const auto& msg : this->areas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tibia.protobuf.map.Npc npcs = 2;
  total_size += 1UL * this->_internal_npcs_size();
  for (const auto& msg : this->npcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tibia.protobuf.map.MapFile resource_files = 3;
  total_size += 1UL * this->_internal_resource_files_size();
  for (const auto& msg : this->resource_files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .tibia.protobuf.shared.Coordinate top_left_tile_coordinate = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *top_left_tile_coordinate_);
    }

    // optional .tibia.protobuf.shared.Coordinate bottom_right_tile_coordinate = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bottom_right_tile_coordinate_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tibia.protobuf.map.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tibia.protobuf.map.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tibia.protobuf.map.Map)
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tibia.protobuf.map.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  areas_.MergeFrom(from.areas_);
  npcs_.MergeFrom(from.npcs_);
  resource_files_.MergeFrom(from.resource_files_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_top_left_tile_coordinate()->::tibia::protobuf::shared::Coordinate::MergeFrom(from._internal_top_left_tile_coordinate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bottom_right_tile_coordinate()->::tibia::protobuf::shared::Coordinate::MergeFrom(from._internal_bottom_right_tile_coordinate());
    }
  }
}

void Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tibia.protobuf.map.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tibia.protobuf.map.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  areas_.InternalSwap(&other->areas_);
  npcs_.InternalSwap(&other->npcs_);
  resource_files_.InternalSwap(&other->resource_files_);
  swap(top_left_tile_coordinate_, other->top_left_tile_coordinate_);
  swap(bottom_right_tile_coordinate_, other->bottom_right_tile_coordinate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Area::InitAsDefaultInstance() {
  ::tibia::protobuf::map::_Area_default_instance_._instance.get_mutable()->label_coordinate_ = const_cast< ::tibia::protobuf::shared::Coordinate*>(
      ::tibia::protobuf::shared::Coordinate::internal_default_instance());
}
class Area::_Internal {
 public:
  using HasBits = decltype(std::declval<Area>()._has_bits_);
  static void set_has_area_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_area_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tibia::protobuf::shared::Coordinate& label_coordinate(const Area* msg);
  static void set_has_label_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reject_donations(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::tibia::protobuf::shared::Coordinate&
Area::_Internal::label_coordinate(const Area* msg) {
  return *msg->label_coordinate_;
}
void Area::clear_label_coordinate() {
  if (label_coordinate_ != nullptr) label_coordinate_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Area::Area()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.map.Area)
}
Area::Area(const Area& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      subarea_ids_(from.subarea_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_label_coordinate()) {
    label_coordinate_ = new ::tibia::protobuf::shared::Coordinate(*from.label_coordinate_);
  } else {
    label_coordinate_ = nullptr;
  }
  ::memcpy(&area_id_, &from.area_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reject_donations_) -
    reinterpret_cast<char*>(&area_id_)) + sizeof(reject_donations_));
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.map.Area)
}

void Area::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Area_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reject_donations_) -
      reinterpret_cast<char*>(&label_coordinate_)) + sizeof(reject_donations_));
}

Area::~Area() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.map.Area)
  SharedDtor();
}

void Area::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete label_coordinate_;
}

void Area::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Area& Area::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Area_map_2eproto.base);
  return *internal_default_instance();
}


void Area::Clear() {
// @@protoc_insertion_point(message_clear_start:tibia.protobuf.map.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subarea_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(label_coordinate_ != nullptr);
      label_coordinate_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&area_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reject_donations_) -
        reinterpret_cast<char*>(&area_id_)) + sizeof(reject_donations_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Area::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 area_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_area_id(&has_bits);
          area_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tibia.protobuf.map.Area.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tibia.protobuf.map.AREA_TYPE area_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tibia::protobuf::map::AREA_TYPE_IsValid(val))) {
            _internal_set_area_type(static_cast<::tibia::protobuf::map::AREA_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 subarea_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_subarea_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_subarea_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tibia.protobuf.shared.Coordinate label_coordinate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reject_donations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reject_donations(&has_bits);
          reject_donations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Area::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.map.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 area_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_area_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tibia.protobuf.map.Area.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .tibia.protobuf.map.AREA_TYPE area_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_area_type(), target);
  }

  // repeated uint32 subarea_ids = 4;
  for (int i = 0, n = this->_internal_subarea_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_subarea_ids(i), target);
  }

  // optional .tibia.protobuf.shared.Coordinate label_coordinate = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::label_coordinate(this), target, stream);
  }

  // optional bool reject_donations = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_reject_donations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.map.Area)
  return target;
}

size_t Area::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tibia.protobuf.map.Area)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 subarea_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->subarea_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_subarea_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .tibia.protobuf.shared.Coordinate label_coordinate = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_coordinate_);
    }

    // optional uint32 area_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_area_id());
    }

    // optional .tibia.protobuf.map.AREA_TYPE area_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_area_type());
    }

    // optional bool reject_donations = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Area::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tibia.protobuf.map.Area)
  GOOGLE_DCHECK_NE(&from, this);
  const Area* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Area>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tibia.protobuf.map.Area)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tibia.protobuf.map.Area)
    MergeFrom(*source);
  }
}

void Area::MergeFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tibia.protobuf.map.Area)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subarea_ids_.MergeFrom(from.subarea_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_label_coordinate()->::tibia::protobuf::shared::Coordinate::MergeFrom(from._internal_label_coordinate());
    }
    if (cached_has_bits & 0x00000004u) {
      area_id_ = from.area_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      area_type_ = from.area_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      reject_donations_ = from.reject_donations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Area::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tibia.protobuf.map.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Area::CopyFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tibia.protobuf.map.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Area::IsInitialized() const {
  return true;
}

void Area::InternalSwap(Area* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subarea_ids_.InternalSwap(&other->subarea_ids_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(label_coordinate_, other->label_coordinate_);
  swap(area_id_, other->area_id_);
  swap(area_type_, other->area_type_);
  swap(reject_donations_, other->reject_donations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Area::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Npc::InitAsDefaultInstance() {
  ::tibia::protobuf::map::_Npc_default_instance_._instance.get_mutable()->tile_coordinate_ = const_cast< ::tibia::protobuf::shared::Coordinate*>(
      ::tibia::protobuf::shared::Coordinate::internal_default_instance());
}
class Npc::_Internal {
 public:
  using HasBits = decltype(std::declval<Npc>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tibia::protobuf::shared::Coordinate& tile_coordinate(const Npc* msg);
  static void set_has_tile_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subarea_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::tibia::protobuf::shared::Coordinate&
Npc::_Internal::tile_coordinate(const Npc* msg) {
  return *msg->tile_coordinate_;
}
void Npc::clear_tile_coordinate() {
  if (tile_coordinate_ != nullptr) tile_coordinate_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Npc::Npc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.map.Npc)
}
Npc::Npc(const Npc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_tile_coordinate()) {
    tile_coordinate_ = new ::tibia::protobuf::shared::Coordinate(*from.tile_coordinate_);
  } else {
    tile_coordinate_ = nullptr;
  }
  subarea_id_ = from.subarea_id_;
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.map.Npc)
}

void Npc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Npc_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tile_coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subarea_id_) -
      reinterpret_cast<char*>(&tile_coordinate_)) + sizeof(subarea_id_));
}

Npc::~Npc() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.map.Npc)
  SharedDtor();
}

void Npc::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tile_coordinate_;
}

void Npc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Npc& Npc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Npc_map_2eproto.base);
  return *internal_default_instance();
}


void Npc::Clear() {
// @@protoc_insertion_point(message_clear_start:tibia.protobuf.map.Npc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tile_coordinate_ != nullptr);
      tile_coordinate_->Clear();
    }
  }
  subarea_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Npc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tibia.protobuf.map.Npc.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tibia.protobuf.shared.Coordinate tile_coordinate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tile_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 subarea_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_subarea_id(&has_bits);
          subarea_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Npc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.map.Npc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tibia.protobuf.map.Npc.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .tibia.protobuf.shared.Coordinate tile_coordinate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tile_coordinate(this), target, stream);
  }

  // optional uint32 subarea_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_subarea_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.map.Npc)
  return target;
}

size_t Npc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tibia.protobuf.map.Npc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .tibia.protobuf.shared.Coordinate tile_coordinate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tile_coordinate_);
    }

    // optional uint32 subarea_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_subarea_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Npc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tibia.protobuf.map.Npc)
  GOOGLE_DCHECK_NE(&from, this);
  const Npc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Npc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tibia.protobuf.map.Npc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tibia.protobuf.map.Npc)
    MergeFrom(*source);
  }
}

void Npc::MergeFrom(const Npc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tibia.protobuf.map.Npc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tile_coordinate()->::tibia::protobuf::shared::Coordinate::MergeFrom(from._internal_tile_coordinate());
    }
    if (cached_has_bits & 0x00000004u) {
      subarea_id_ = from.subarea_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Npc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tibia.protobuf.map.Npc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Npc::CopyFrom(const Npc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tibia.protobuf.map.Npc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Npc::IsInitialized() const {
  return true;
}

void Npc::InternalSwap(Npc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tile_coordinate_, other->tile_coordinate_);
  swap(subarea_id_, other->subarea_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Npc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapFile::InitAsDefaultInstance() {
  ::tibia::protobuf::map::_MapFile_default_instance_._instance.get_mutable()->top_left_coordinate_ = const_cast< ::tibia::protobuf::shared::Coordinate*>(
      ::tibia::protobuf::shared::Coordinate::internal_default_instance());
}
class MapFile::_Internal {
 public:
  using HasBits = decltype(std::declval<MapFile>()._has_bits_);
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tibia::protobuf::shared::Coordinate& top_left_coordinate(const MapFile* msg);
  static void set_has_top_left_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fields_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fields_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_area_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::tibia::protobuf::shared::Coordinate&
MapFile::_Internal::top_left_coordinate(const MapFile* msg) {
  return *msg->top_left_coordinate_;
}
void MapFile::clear_top_left_coordinate() {
  if (top_left_coordinate_ != nullptr) top_left_coordinate_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MapFile::MapFile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tibia.protobuf.map.MapFile)
}
MapFile::MapFile(const MapFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from._internal_has_top_left_coordinate()) {
    top_left_coordinate_ = new ::tibia::protobuf::shared::Coordinate(*from.top_left_coordinate_);
  } else {
    top_left_coordinate_ = nullptr;
  }
  ::memcpy(&file_type_, &from.file_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_factor_) -
    reinterpret_cast<char*>(&file_type_)) + sizeof(scale_factor_));
  // @@protoc_insertion_point(copy_constructor:tibia.protobuf.map.MapFile)
}

void MapFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapFile_map_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&top_left_coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_factor_) -
      reinterpret_cast<char*>(&top_left_coordinate_)) + sizeof(scale_factor_));
}

MapFile::~MapFile() {
  // @@protoc_insertion_point(destructor:tibia.protobuf.map.MapFile)
  SharedDtor();
}

void MapFile::SharedDtor() {
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete top_left_coordinate_;
}

void MapFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapFile& MapFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapFile_map_2eproto.base);
  return *internal_default_instance();
}


void MapFile::Clear() {
// @@protoc_insertion_point(message_clear_start:tibia.protobuf.map.MapFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(top_left_coordinate_ != nullptr);
      top_left_coordinate_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&file_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_factor_) -
        reinterpret_cast<char*>(&file_type_)) + sizeof(scale_factor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MapFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .tibia.protobuf.map.MAP_FILE_TYPE file_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tibia::protobuf::map::MAP_FILE_TYPE_IsValid(val))) {
            _internal_set_file_type(static_cast<::tibia::protobuf::map::MAP_FILE_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .tibia.protobuf.shared.Coordinate top_left_coordinate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_left_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tibia.protobuf.map.MapFile.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fields_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fields_width(&has_bits);
          fields_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fields_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fields_height(&has_bits);
          fields_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 area_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_area_id(&has_bits);
          area_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double scale_factor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_scale_factor(&has_bits);
          scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tibia.protobuf.map.MapFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tibia.protobuf.map.MAP_FILE_TYPE file_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_file_type(), target);
  }

  // optional .tibia.protobuf.shared.Coordinate top_left_coordinate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::top_left_coordinate(this), target, stream);
  }

  // optional string file_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tibia.protobuf.map.MapFile.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // optional uint32 fields_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fields_width(), target);
  }

  // optional uint32 fields_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_fields_height(), target);
  }

  // optional uint32 area_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_area_id(), target);
  }

  // optional double scale_factor = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_scale_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tibia.protobuf.map.MapFile)
  return target;
}

size_t MapFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tibia.protobuf.map.MapFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string file_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional .tibia.protobuf.shared.Coordinate top_left_coordinate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *top_left_coordinate_);
    }

    // optional .tibia.protobuf.map.MAP_FILE_TYPE file_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_file_type());
    }

    // optional uint32 fields_width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fields_width());
    }

    // optional uint32 fields_height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fields_height());
    }

    // optional uint32 area_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_area_id());
    }

    // optional double scale_factor = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tibia.protobuf.map.MapFile)
  GOOGLE_DCHECK_NE(&from, this);
  const MapFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tibia.protobuf.map.MapFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tibia.protobuf.map.MapFile)
    MergeFrom(*source);
  }
}

void MapFile::MergeFrom(const MapFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tibia.protobuf.map.MapFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_top_left_coordinate()->::tibia::protobuf::shared::Coordinate::MergeFrom(from._internal_top_left_coordinate());
    }
    if (cached_has_bits & 0x00000004u) {
      file_type_ = from.file_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      fields_width_ = from.fields_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      fields_height_ = from.fields_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      area_id_ = from.area_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      scale_factor_ = from.scale_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tibia.protobuf.map.MapFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapFile::CopyFrom(const MapFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tibia.protobuf.map.MapFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapFile::IsInitialized() const {
  return true;
}

void MapFile::InternalSwap(MapFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(top_left_coordinate_, other->top_left_coordinate_);
  swap(file_type_, other->file_type_);
  swap(fields_width_, other->fields_width_);
  swap(fields_height_, other->fields_height_);
  swap(area_id_, other->area_id_);
  swap(scale_factor_, other->scale_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapFile::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace map
}  // namespace protobuf
}  // namespace tibia
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tibia::protobuf::map::Map* Arena::CreateMaybeMessage< ::tibia::protobuf::map::Map >(Arena* arena) {
  return Arena::CreateInternal< ::tibia::protobuf::map::Map >(arena);
}
template<> PROTOBUF_NOINLINE ::tibia::protobuf::map::Area* Arena::CreateMaybeMessage< ::tibia::protobuf::map::Area >(Arena* arena) {
  return Arena::CreateInternal< ::tibia::protobuf::map::Area >(arena);
}
template<> PROTOBUF_NOINLINE ::tibia::protobuf::map::Npc* Arena::CreateMaybeMessage< ::tibia::protobuf::map::Npc >(Arena* arena) {
  return Arena::CreateInternal< ::tibia::protobuf::map::Npc >(arena);
}
template<> PROTOBUF_NOINLINE ::tibia::protobuf::map::MapFile* Arena::CreateMaybeMessage< ::tibia::protobuf::map::MapFile >(Arena* arena) {
  return Arena::CreateInternal< ::tibia::protobuf::map::MapFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
