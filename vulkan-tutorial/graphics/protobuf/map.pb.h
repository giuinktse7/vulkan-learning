// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "shared.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto;
namespace tibia {
namespace protobuf {
namespace map {
class Area;
class AreaDefaultTypeInternal;
extern AreaDefaultTypeInternal _Area_default_instance_;
class Map;
class MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class MapFile;
class MapFileDefaultTypeInternal;
extern MapFileDefaultTypeInternal _MapFile_default_instance_;
class Npc;
class NpcDefaultTypeInternal;
extern NpcDefaultTypeInternal _Npc_default_instance_;
}  // namespace map
}  // namespace protobuf
}  // namespace tibia
PROTOBUF_NAMESPACE_OPEN
template<> ::tibia::protobuf::map::Area* Arena::CreateMaybeMessage<::tibia::protobuf::map::Area>(Arena*);
template<> ::tibia::protobuf::map::Map* Arena::CreateMaybeMessage<::tibia::protobuf::map::Map>(Arena*);
template<> ::tibia::protobuf::map::MapFile* Arena::CreateMaybeMessage<::tibia::protobuf::map::MapFile>(Arena*);
template<> ::tibia::protobuf::map::Npc* Arena::CreateMaybeMessage<::tibia::protobuf::map::Npc>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tibia {
namespace protobuf {
namespace map {

enum MAP_FILE_TYPE : int {
  MAP_FILE_TYPE_SUBAREA = 0,
  MAP_FILE_TYPE_SATELLITE = 1,
  MAP_FILE_TYPE_MINIMAP = 2
};
bool MAP_FILE_TYPE_IsValid(int value);
constexpr MAP_FILE_TYPE MAP_FILE_TYPE_MIN = MAP_FILE_TYPE_SUBAREA;
constexpr MAP_FILE_TYPE MAP_FILE_TYPE_MAX = MAP_FILE_TYPE_MINIMAP;
constexpr int MAP_FILE_TYPE_ARRAYSIZE = MAP_FILE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MAP_FILE_TYPE_descriptor();
template<typename T>
inline const std::string& MAP_FILE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MAP_FILE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MAP_FILE_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MAP_FILE_TYPE_descriptor(), enum_t_value);
}
inline bool MAP_FILE_TYPE_Parse(
    const std::string& name, MAP_FILE_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MAP_FILE_TYPE>(
    MAP_FILE_TYPE_descriptor(), name, value);
}
enum AREA_TYPE : int {
  AREA_TYPE_NONE = 0,
  AREA_TYPE_AREA = 1,
  AREA_TYPE_SUBAREA = 2
};
bool AREA_TYPE_IsValid(int value);
constexpr AREA_TYPE AREA_TYPE_MIN = AREA_TYPE_NONE;
constexpr AREA_TYPE AREA_TYPE_MAX = AREA_TYPE_SUBAREA;
constexpr int AREA_TYPE_ARRAYSIZE = AREA_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AREA_TYPE_descriptor();
template<typename T>
inline const std::string& AREA_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AREA_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AREA_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AREA_TYPE_descriptor(), enum_t_value);
}
inline bool AREA_TYPE_Parse(
    const std::string& name, AREA_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AREA_TYPE>(
    AREA_TYPE_descriptor(), name, value);
}
// ===================================================================

class Map :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tibia.protobuf.map.Map) */ {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return CreateMaybeMessage<Map>(nullptr);
  }

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tibia.protobuf.map.Map";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreasFieldNumber = 1,
    kNpcsFieldNumber = 2,
    kResourceFilesFieldNumber = 3,
    kTopLeftTileCoordinateFieldNumber = 4,
    kBottomRightTileCoordinateFieldNumber = 5,
  };
  // repeated .tibia.protobuf.map.Area areas = 1;
  int areas_size() const;
  private:
  int _internal_areas_size() const;
  public:
  void clear_areas();
  ::tibia::protobuf::map::Area* mutable_areas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::Area >*
      mutable_areas();
  private:
  const ::tibia::protobuf::map::Area& _internal_areas(int index) const;
  ::tibia::protobuf::map::Area* _internal_add_areas();
  public:
  const ::tibia::protobuf::map::Area& areas(int index) const;
  ::tibia::protobuf::map::Area* add_areas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::Area >&
      areas() const;

  // repeated .tibia.protobuf.map.Npc npcs = 2;
  int npcs_size() const;
  private:
  int _internal_npcs_size() const;
  public:
  void clear_npcs();
  ::tibia::protobuf::map::Npc* mutable_npcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::Npc >*
      mutable_npcs();
  private:
  const ::tibia::protobuf::map::Npc& _internal_npcs(int index) const;
  ::tibia::protobuf::map::Npc* _internal_add_npcs();
  public:
  const ::tibia::protobuf::map::Npc& npcs(int index) const;
  ::tibia::protobuf::map::Npc* add_npcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::Npc >&
      npcs() const;

  // repeated .tibia.protobuf.map.MapFile resource_files = 3;
  int resource_files_size() const;
  private:
  int _internal_resource_files_size() const;
  public:
  void clear_resource_files();
  ::tibia::protobuf::map::MapFile* mutable_resource_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::MapFile >*
      mutable_resource_files();
  private:
  const ::tibia::protobuf::map::MapFile& _internal_resource_files(int index) const;
  ::tibia::protobuf::map::MapFile* _internal_add_resource_files();
  public:
  const ::tibia::protobuf::map::MapFile& resource_files(int index) const;
  ::tibia::protobuf::map::MapFile* add_resource_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::MapFile >&
      resource_files() const;

  // optional .tibia.protobuf.shared.Coordinate top_left_tile_coordinate = 4;
  bool has_top_left_tile_coordinate() const;
  private:
  bool _internal_has_top_left_tile_coordinate() const;
  public:
  void clear_top_left_tile_coordinate();
  const ::tibia::protobuf::shared::Coordinate& top_left_tile_coordinate() const;
  ::tibia::protobuf::shared::Coordinate* release_top_left_tile_coordinate();
  ::tibia::protobuf::shared::Coordinate* mutable_top_left_tile_coordinate();
  void set_allocated_top_left_tile_coordinate(::tibia::protobuf::shared::Coordinate* top_left_tile_coordinate);
  private:
  const ::tibia::protobuf::shared::Coordinate& _internal_top_left_tile_coordinate() const;
  ::tibia::protobuf::shared::Coordinate* _internal_mutable_top_left_tile_coordinate();
  public:

  // optional .tibia.protobuf.shared.Coordinate bottom_right_tile_coordinate = 5;
  bool has_bottom_right_tile_coordinate() const;
  private:
  bool _internal_has_bottom_right_tile_coordinate() const;
  public:
  void clear_bottom_right_tile_coordinate();
  const ::tibia::protobuf::shared::Coordinate& bottom_right_tile_coordinate() const;
  ::tibia::protobuf::shared::Coordinate* release_bottom_right_tile_coordinate();
  ::tibia::protobuf::shared::Coordinate* mutable_bottom_right_tile_coordinate();
  void set_allocated_bottom_right_tile_coordinate(::tibia::protobuf::shared::Coordinate* bottom_right_tile_coordinate);
  private:
  const ::tibia::protobuf::shared::Coordinate& _internal_bottom_right_tile_coordinate() const;
  ::tibia::protobuf::shared::Coordinate* _internal_mutable_bottom_right_tile_coordinate();
  public:

  // @@protoc_insertion_point(class_scope:tibia.protobuf.map.Map)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::Area > areas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::Npc > npcs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::MapFile > resource_files_;
  ::tibia::protobuf::shared::Coordinate* top_left_tile_coordinate_;
  ::tibia::protobuf::shared::Coordinate* bottom_right_tile_coordinate_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Area :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tibia.protobuf.map.Area) */ {
 public:
  Area();
  virtual ~Area();

  Area(const Area& from);
  Area(Area&& from) noexcept
    : Area() {
    *this = ::std::move(from);
  }

  inline Area& operator=(const Area& from) {
    CopyFrom(from);
    return *this;
  }
  inline Area& operator=(Area&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Area& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Area* internal_default_instance() {
    return reinterpret_cast<const Area*>(
               &_Area_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Area& a, Area& b) {
    a.Swap(&b);
  }
  inline void Swap(Area* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Area* New() const final {
    return CreateMaybeMessage<Area>(nullptr);
  }

  Area* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Area>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Area& from);
  void MergeFrom(const Area& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Area* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tibia.protobuf.map.Area";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubareaIdsFieldNumber = 4,
    kNameFieldNumber = 2,
    kLabelCoordinateFieldNumber = 5,
    kAreaIdFieldNumber = 1,
    kAreaTypeFieldNumber = 3,
    kRejectDonationsFieldNumber = 6,
  };
  // repeated uint32 subarea_ids = 4;
  int subarea_ids_size() const;
  private:
  int _internal_subarea_ids_size() const;
  public:
  void clear_subarea_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subarea_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_subarea_ids() const;
  void _internal_add_subarea_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_subarea_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 subarea_ids(int index) const;
  void set_subarea_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_subarea_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      subarea_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_subarea_ids();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .tibia.protobuf.shared.Coordinate label_coordinate = 5;
  bool has_label_coordinate() const;
  private:
  bool _internal_has_label_coordinate() const;
  public:
  void clear_label_coordinate();
  const ::tibia::protobuf::shared::Coordinate& label_coordinate() const;
  ::tibia::protobuf::shared::Coordinate* release_label_coordinate();
  ::tibia::protobuf::shared::Coordinate* mutable_label_coordinate();
  void set_allocated_label_coordinate(::tibia::protobuf::shared::Coordinate* label_coordinate);
  private:
  const ::tibia::protobuf::shared::Coordinate& _internal_label_coordinate() const;
  ::tibia::protobuf::shared::Coordinate* _internal_mutable_label_coordinate();
  public:

  // optional uint32 area_id = 1;
  bool has_area_id() const;
  private:
  bool _internal_has_area_id() const;
  public:
  void clear_area_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 area_id() const;
  void set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_area_id() const;
  void _internal_set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .tibia.protobuf.map.AREA_TYPE area_type = 3;
  bool has_area_type() const;
  private:
  bool _internal_has_area_type() const;
  public:
  void clear_area_type();
  ::tibia::protobuf::map::AREA_TYPE area_type() const;
  void set_area_type(::tibia::protobuf::map::AREA_TYPE value);
  private:
  ::tibia::protobuf::map::AREA_TYPE _internal_area_type() const;
  void _internal_set_area_type(::tibia::protobuf::map::AREA_TYPE value);
  public:

  // optional bool reject_donations = 6;
  bool has_reject_donations() const;
  private:
  bool _internal_has_reject_donations() const;
  public:
  void clear_reject_donations();
  bool reject_donations() const;
  void set_reject_donations(bool value);
  private:
  bool _internal_reject_donations() const;
  void _internal_set_reject_donations(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tibia.protobuf.map.Area)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > subarea_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::tibia::protobuf::shared::Coordinate* label_coordinate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 area_id_;
  int area_type_;
  bool reject_donations_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Npc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tibia.protobuf.map.Npc) */ {
 public:
  Npc();
  virtual ~Npc();

  Npc(const Npc& from);
  Npc(Npc&& from) noexcept
    : Npc() {
    *this = ::std::move(from);
  }

  inline Npc& operator=(const Npc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Npc& operator=(Npc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Npc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Npc* internal_default_instance() {
    return reinterpret_cast<const Npc*>(
               &_Npc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Npc& a, Npc& b) {
    a.Swap(&b);
  }
  inline void Swap(Npc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Npc* New() const final {
    return CreateMaybeMessage<Npc>(nullptr);
  }

  Npc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Npc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Npc& from);
  void MergeFrom(const Npc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Npc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tibia.protobuf.map.Npc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTileCoordinateFieldNumber = 2,
    kSubareaIdFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .tibia.protobuf.shared.Coordinate tile_coordinate = 2;
  bool has_tile_coordinate() const;
  private:
  bool _internal_has_tile_coordinate() const;
  public:
  void clear_tile_coordinate();
  const ::tibia::protobuf::shared::Coordinate& tile_coordinate() const;
  ::tibia::protobuf::shared::Coordinate* release_tile_coordinate();
  ::tibia::protobuf::shared::Coordinate* mutable_tile_coordinate();
  void set_allocated_tile_coordinate(::tibia::protobuf::shared::Coordinate* tile_coordinate);
  private:
  const ::tibia::protobuf::shared::Coordinate& _internal_tile_coordinate() const;
  ::tibia::protobuf::shared::Coordinate* _internal_mutable_tile_coordinate();
  public:

  // optional uint32 subarea_id = 3;
  bool has_subarea_id() const;
  private:
  bool _internal_has_subarea_id() const;
  public:
  void clear_subarea_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 subarea_id() const;
  void set_subarea_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subarea_id() const;
  void _internal_set_subarea_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tibia.protobuf.map.Npc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::tibia::protobuf::shared::Coordinate* tile_coordinate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subarea_id_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class MapFile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tibia.protobuf.map.MapFile) */ {
 public:
  MapFile();
  virtual ~MapFile();

  MapFile(const MapFile& from);
  MapFile(MapFile&& from) noexcept
    : MapFile() {
    *this = ::std::move(from);
  }

  inline MapFile& operator=(const MapFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapFile& operator=(MapFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapFile* internal_default_instance() {
    return reinterpret_cast<const MapFile*>(
               &_MapFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MapFile& a, MapFile& b) {
    a.Swap(&b);
  }
  inline void Swap(MapFile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapFile* New() const final {
    return CreateMaybeMessage<MapFile>(nullptr);
  }

  MapFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapFile& from);
  void MergeFrom(const MapFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tibia.protobuf.map.MapFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 3,
    kTopLeftCoordinateFieldNumber = 2,
    kFileTypeFieldNumber = 1,
    kFieldsWidthFieldNumber = 4,
    kFieldsHeightFieldNumber = 5,
    kAreaIdFieldNumber = 6,
    kScaleFactorFieldNumber = 7,
  };
  // optional string file_name = 3;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional .tibia.protobuf.shared.Coordinate top_left_coordinate = 2;
  bool has_top_left_coordinate() const;
  private:
  bool _internal_has_top_left_coordinate() const;
  public:
  void clear_top_left_coordinate();
  const ::tibia::protobuf::shared::Coordinate& top_left_coordinate() const;
  ::tibia::protobuf::shared::Coordinate* release_top_left_coordinate();
  ::tibia::protobuf::shared::Coordinate* mutable_top_left_coordinate();
  void set_allocated_top_left_coordinate(::tibia::protobuf::shared::Coordinate* top_left_coordinate);
  private:
  const ::tibia::protobuf::shared::Coordinate& _internal_top_left_coordinate() const;
  ::tibia::protobuf::shared::Coordinate* _internal_mutable_top_left_coordinate();
  public:

  // optional .tibia.protobuf.map.MAP_FILE_TYPE file_type = 1;
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  ::tibia::protobuf::map::MAP_FILE_TYPE file_type() const;
  void set_file_type(::tibia::protobuf::map::MAP_FILE_TYPE value);
  private:
  ::tibia::protobuf::map::MAP_FILE_TYPE _internal_file_type() const;
  void _internal_set_file_type(::tibia::protobuf::map::MAP_FILE_TYPE value);
  public:

  // optional uint32 fields_width = 4;
  bool has_fields_width() const;
  private:
  bool _internal_has_fields_width() const;
  public:
  void clear_fields_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 fields_width() const;
  void set_fields_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fields_width() const;
  void _internal_set_fields_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fields_height = 5;
  bool has_fields_height() const;
  private:
  bool _internal_has_fields_height() const;
  public:
  void clear_fields_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 fields_height() const;
  void set_fields_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fields_height() const;
  void _internal_set_fields_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 area_id = 6;
  bool has_area_id() const;
  private:
  bool _internal_has_area_id() const;
  public:
  void clear_area_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 area_id() const;
  void set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_area_id() const;
  void _internal_set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double scale_factor = 7;
  bool has_scale_factor() const;
  private:
  bool _internal_has_scale_factor() const;
  public:
  void clear_scale_factor();
  double scale_factor() const;
  void set_scale_factor(double value);
  private:
  double _internal_scale_factor() const;
  void _internal_set_scale_factor(double value);
  public:

  // @@protoc_insertion_point(class_scope:tibia.protobuf.map.MapFile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::tibia::protobuf::shared::Coordinate* top_left_coordinate_;
  int file_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fields_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fields_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 area_id_;
  double scale_factor_;
  friend struct ::TableStruct_map_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Map

// repeated .tibia.protobuf.map.Area areas = 1;
inline int Map::_internal_areas_size() const {
  return areas_.size();
}
inline int Map::areas_size() const {
  return _internal_areas_size();
}
inline void Map::clear_areas() {
  areas_.Clear();
}
inline ::tibia::protobuf::map::Area* Map::mutable_areas(int index) {
  // @@protoc_insertion_point(field_mutable:tibia.protobuf.map.Map.areas)
  return areas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::Area >*
Map::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:tibia.protobuf.map.Map.areas)
  return &areas_;
}
inline const ::tibia::protobuf::map::Area& Map::_internal_areas(int index) const {
  return areas_.Get(index);
}
inline const ::tibia::protobuf::map::Area& Map::areas(int index) const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Map.areas)
  return _internal_areas(index);
}
inline ::tibia::protobuf::map::Area* Map::_internal_add_areas() {
  return areas_.Add();
}
inline ::tibia::protobuf::map::Area* Map::add_areas() {
  // @@protoc_insertion_point(field_add:tibia.protobuf.map.Map.areas)
  return _internal_add_areas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::Area >&
Map::areas() const {
  // @@protoc_insertion_point(field_list:tibia.protobuf.map.Map.areas)
  return areas_;
}

// repeated .tibia.protobuf.map.Npc npcs = 2;
inline int Map::_internal_npcs_size() const {
  return npcs_.size();
}
inline int Map::npcs_size() const {
  return _internal_npcs_size();
}
inline void Map::clear_npcs() {
  npcs_.Clear();
}
inline ::tibia::protobuf::map::Npc* Map::mutable_npcs(int index) {
  // @@protoc_insertion_point(field_mutable:tibia.protobuf.map.Map.npcs)
  return npcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::Npc >*
Map::mutable_npcs() {
  // @@protoc_insertion_point(field_mutable_list:tibia.protobuf.map.Map.npcs)
  return &npcs_;
}
inline const ::tibia::protobuf::map::Npc& Map::_internal_npcs(int index) const {
  return npcs_.Get(index);
}
inline const ::tibia::protobuf::map::Npc& Map::npcs(int index) const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Map.npcs)
  return _internal_npcs(index);
}
inline ::tibia::protobuf::map::Npc* Map::_internal_add_npcs() {
  return npcs_.Add();
}
inline ::tibia::protobuf::map::Npc* Map::add_npcs() {
  // @@protoc_insertion_point(field_add:tibia.protobuf.map.Map.npcs)
  return _internal_add_npcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::Npc >&
Map::npcs() const {
  // @@protoc_insertion_point(field_list:tibia.protobuf.map.Map.npcs)
  return npcs_;
}

// repeated .tibia.protobuf.map.MapFile resource_files = 3;
inline int Map::_internal_resource_files_size() const {
  return resource_files_.size();
}
inline int Map::resource_files_size() const {
  return _internal_resource_files_size();
}
inline void Map::clear_resource_files() {
  resource_files_.Clear();
}
inline ::tibia::protobuf::map::MapFile* Map::mutable_resource_files(int index) {
  // @@protoc_insertion_point(field_mutable:tibia.protobuf.map.Map.resource_files)
  return resource_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::MapFile >*
Map::mutable_resource_files() {
  // @@protoc_insertion_point(field_mutable_list:tibia.protobuf.map.Map.resource_files)
  return &resource_files_;
}
inline const ::tibia::protobuf::map::MapFile& Map::_internal_resource_files(int index) const {
  return resource_files_.Get(index);
}
inline const ::tibia::protobuf::map::MapFile& Map::resource_files(int index) const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Map.resource_files)
  return _internal_resource_files(index);
}
inline ::tibia::protobuf::map::MapFile* Map::_internal_add_resource_files() {
  return resource_files_.Add();
}
inline ::tibia::protobuf::map::MapFile* Map::add_resource_files() {
  // @@protoc_insertion_point(field_add:tibia.protobuf.map.Map.resource_files)
  return _internal_add_resource_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tibia::protobuf::map::MapFile >&
Map::resource_files() const {
  // @@protoc_insertion_point(field_list:tibia.protobuf.map.Map.resource_files)
  return resource_files_;
}

// optional .tibia.protobuf.shared.Coordinate top_left_tile_coordinate = 4;
inline bool Map::_internal_has_top_left_tile_coordinate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || top_left_tile_coordinate_ != nullptr);
  return value;
}
inline bool Map::has_top_left_tile_coordinate() const {
  return _internal_has_top_left_tile_coordinate();
}
inline const ::tibia::protobuf::shared::Coordinate& Map::_internal_top_left_tile_coordinate() const {
  const ::tibia::protobuf::shared::Coordinate* p = top_left_tile_coordinate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tibia::protobuf::shared::Coordinate*>(
      &::tibia::protobuf::shared::_Coordinate_default_instance_);
}
inline const ::tibia::protobuf::shared::Coordinate& Map::top_left_tile_coordinate() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Map.top_left_tile_coordinate)
  return _internal_top_left_tile_coordinate();
}
inline ::tibia::protobuf::shared::Coordinate* Map::release_top_left_tile_coordinate() {
  // @@protoc_insertion_point(field_release:tibia.protobuf.map.Map.top_left_tile_coordinate)
  _has_bits_[0] &= ~0x00000001u;
  ::tibia::protobuf::shared::Coordinate* temp = top_left_tile_coordinate_;
  top_left_tile_coordinate_ = nullptr;
  return temp;
}
inline ::tibia::protobuf::shared::Coordinate* Map::_internal_mutable_top_left_tile_coordinate() {
  _has_bits_[0] |= 0x00000001u;
  if (top_left_tile_coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::tibia::protobuf::shared::Coordinate>(GetArenaNoVirtual());
    top_left_tile_coordinate_ = p;
  }
  return top_left_tile_coordinate_;
}
inline ::tibia::protobuf::shared::Coordinate* Map::mutable_top_left_tile_coordinate() {
  // @@protoc_insertion_point(field_mutable:tibia.protobuf.map.Map.top_left_tile_coordinate)
  return _internal_mutable_top_left_tile_coordinate();
}
inline void Map::set_allocated_top_left_tile_coordinate(::tibia::protobuf::shared::Coordinate* top_left_tile_coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_left_tile_coordinate_);
  }
  if (top_left_tile_coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      top_left_tile_coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_left_tile_coordinate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  top_left_tile_coordinate_ = top_left_tile_coordinate;
  // @@protoc_insertion_point(field_set_allocated:tibia.protobuf.map.Map.top_left_tile_coordinate)
}

// optional .tibia.protobuf.shared.Coordinate bottom_right_tile_coordinate = 5;
inline bool Map::_internal_has_bottom_right_tile_coordinate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bottom_right_tile_coordinate_ != nullptr);
  return value;
}
inline bool Map::has_bottom_right_tile_coordinate() const {
  return _internal_has_bottom_right_tile_coordinate();
}
inline const ::tibia::protobuf::shared::Coordinate& Map::_internal_bottom_right_tile_coordinate() const {
  const ::tibia::protobuf::shared::Coordinate* p = bottom_right_tile_coordinate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tibia::protobuf::shared::Coordinate*>(
      &::tibia::protobuf::shared::_Coordinate_default_instance_);
}
inline const ::tibia::protobuf::shared::Coordinate& Map::bottom_right_tile_coordinate() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Map.bottom_right_tile_coordinate)
  return _internal_bottom_right_tile_coordinate();
}
inline ::tibia::protobuf::shared::Coordinate* Map::release_bottom_right_tile_coordinate() {
  // @@protoc_insertion_point(field_release:tibia.protobuf.map.Map.bottom_right_tile_coordinate)
  _has_bits_[0] &= ~0x00000002u;
  ::tibia::protobuf::shared::Coordinate* temp = bottom_right_tile_coordinate_;
  bottom_right_tile_coordinate_ = nullptr;
  return temp;
}
inline ::tibia::protobuf::shared::Coordinate* Map::_internal_mutable_bottom_right_tile_coordinate() {
  _has_bits_[0] |= 0x00000002u;
  if (bottom_right_tile_coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::tibia::protobuf::shared::Coordinate>(GetArenaNoVirtual());
    bottom_right_tile_coordinate_ = p;
  }
  return bottom_right_tile_coordinate_;
}
inline ::tibia::protobuf::shared::Coordinate* Map::mutable_bottom_right_tile_coordinate() {
  // @@protoc_insertion_point(field_mutable:tibia.protobuf.map.Map.bottom_right_tile_coordinate)
  return _internal_mutable_bottom_right_tile_coordinate();
}
inline void Map::set_allocated_bottom_right_tile_coordinate(::tibia::protobuf::shared::Coordinate* bottom_right_tile_coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom_right_tile_coordinate_);
  }
  if (bottom_right_tile_coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bottom_right_tile_coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom_right_tile_coordinate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bottom_right_tile_coordinate_ = bottom_right_tile_coordinate;
  // @@protoc_insertion_point(field_set_allocated:tibia.protobuf.map.Map.bottom_right_tile_coordinate)
}

// -------------------------------------------------------------------

// Area

// optional uint32 area_id = 1;
inline bool Area::_internal_has_area_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Area::has_area_id() const {
  return _internal_has_area_id();
}
inline void Area::clear_area_id() {
  area_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Area::_internal_area_id() const {
  return area_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Area::area_id() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Area.area_id)
  return _internal_area_id();
}
inline void Area::_internal_set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  area_id_ = value;
}
inline void Area::set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_area_id(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.Area.area_id)
}

// optional string name = 2;
inline bool Area::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Area::has_name() const {
  return _internal_has_name();
}
inline void Area::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Area::name() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Area.name)
  return _internal_name();
}
inline void Area::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.Area.name)
}
inline std::string* Area::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tibia.protobuf.map.Area.name)
  return _internal_mutable_name();
}
inline const std::string& Area::_internal_name() const {
  return name_.GetNoArena();
}
inline void Area::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Area::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tibia.protobuf.map.Area.name)
}
inline void Area::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tibia.protobuf.map.Area.name)
}
inline void Area::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tibia.protobuf.map.Area.name)
}
inline std::string* Area::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Area::release_name() {
  // @@protoc_insertion_point(field_release:tibia.protobuf.map.Area.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Area::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tibia.protobuf.map.Area.name)
}

// optional .tibia.protobuf.map.AREA_TYPE area_type = 3;
inline bool Area::_internal_has_area_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Area::has_area_type() const {
  return _internal_has_area_type();
}
inline void Area::clear_area_type() {
  area_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::tibia::protobuf::map::AREA_TYPE Area::_internal_area_type() const {
  return static_cast< ::tibia::protobuf::map::AREA_TYPE >(area_type_);
}
inline ::tibia::protobuf::map::AREA_TYPE Area::area_type() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Area.area_type)
  return _internal_area_type();
}
inline void Area::_internal_set_area_type(::tibia::protobuf::map::AREA_TYPE value) {
  assert(::tibia::protobuf::map::AREA_TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  area_type_ = value;
}
inline void Area::set_area_type(::tibia::protobuf::map::AREA_TYPE value) {
  _internal_set_area_type(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.Area.area_type)
}

// repeated uint32 subarea_ids = 4;
inline int Area::_internal_subarea_ids_size() const {
  return subarea_ids_.size();
}
inline int Area::subarea_ids_size() const {
  return _internal_subarea_ids_size();
}
inline void Area::clear_subarea_ids() {
  subarea_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Area::_internal_subarea_ids(int index) const {
  return subarea_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Area::subarea_ids(int index) const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Area.subarea_ids)
  return _internal_subarea_ids(index);
}
inline void Area::set_subarea_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  subarea_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.Area.subarea_ids)
}
inline void Area::_internal_add_subarea_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  subarea_ids_.Add(value);
}
inline void Area::add_subarea_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_subarea_ids(value);
  // @@protoc_insertion_point(field_add:tibia.protobuf.map.Area.subarea_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Area::_internal_subarea_ids() const {
  return subarea_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Area::subarea_ids() const {
  // @@protoc_insertion_point(field_list:tibia.protobuf.map.Area.subarea_ids)
  return _internal_subarea_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Area::_internal_mutable_subarea_ids() {
  return &subarea_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Area::mutable_subarea_ids() {
  // @@protoc_insertion_point(field_mutable_list:tibia.protobuf.map.Area.subarea_ids)
  return _internal_mutable_subarea_ids();
}

// optional .tibia.protobuf.shared.Coordinate label_coordinate = 5;
inline bool Area::_internal_has_label_coordinate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || label_coordinate_ != nullptr);
  return value;
}
inline bool Area::has_label_coordinate() const {
  return _internal_has_label_coordinate();
}
inline const ::tibia::protobuf::shared::Coordinate& Area::_internal_label_coordinate() const {
  const ::tibia::protobuf::shared::Coordinate* p = label_coordinate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tibia::protobuf::shared::Coordinate*>(
      &::tibia::protobuf::shared::_Coordinate_default_instance_);
}
inline const ::tibia::protobuf::shared::Coordinate& Area::label_coordinate() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Area.label_coordinate)
  return _internal_label_coordinate();
}
inline ::tibia::protobuf::shared::Coordinate* Area::release_label_coordinate() {
  // @@protoc_insertion_point(field_release:tibia.protobuf.map.Area.label_coordinate)
  _has_bits_[0] &= ~0x00000002u;
  ::tibia::protobuf::shared::Coordinate* temp = label_coordinate_;
  label_coordinate_ = nullptr;
  return temp;
}
inline ::tibia::protobuf::shared::Coordinate* Area::_internal_mutable_label_coordinate() {
  _has_bits_[0] |= 0x00000002u;
  if (label_coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::tibia::protobuf::shared::Coordinate>(GetArenaNoVirtual());
    label_coordinate_ = p;
  }
  return label_coordinate_;
}
inline ::tibia::protobuf::shared::Coordinate* Area::mutable_label_coordinate() {
  // @@protoc_insertion_point(field_mutable:tibia.protobuf.map.Area.label_coordinate)
  return _internal_mutable_label_coordinate();
}
inline void Area::set_allocated_label_coordinate(::tibia::protobuf::shared::Coordinate* label_coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_coordinate_);
  }
  if (label_coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      label_coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_coordinate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_coordinate_ = label_coordinate;
  // @@protoc_insertion_point(field_set_allocated:tibia.protobuf.map.Area.label_coordinate)
}

// optional bool reject_donations = 6;
inline bool Area::_internal_has_reject_donations() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Area::has_reject_donations() const {
  return _internal_has_reject_donations();
}
inline void Area::clear_reject_donations() {
  reject_donations_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Area::_internal_reject_donations() const {
  return reject_donations_;
}
inline bool Area::reject_donations() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Area.reject_donations)
  return _internal_reject_donations();
}
inline void Area::_internal_set_reject_donations(bool value) {
  _has_bits_[0] |= 0x00000010u;
  reject_donations_ = value;
}
inline void Area::set_reject_donations(bool value) {
  _internal_set_reject_donations(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.Area.reject_donations)
}

// -------------------------------------------------------------------

// Npc

// optional string name = 1;
inline bool Npc::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Npc::has_name() const {
  return _internal_has_name();
}
inline void Npc::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Npc::name() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Npc.name)
  return _internal_name();
}
inline void Npc::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.Npc.name)
}
inline std::string* Npc::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tibia.protobuf.map.Npc.name)
  return _internal_mutable_name();
}
inline const std::string& Npc::_internal_name() const {
  return name_.GetNoArena();
}
inline void Npc::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Npc::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tibia.protobuf.map.Npc.name)
}
inline void Npc::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tibia.protobuf.map.Npc.name)
}
inline void Npc::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tibia.protobuf.map.Npc.name)
}
inline std::string* Npc::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Npc::release_name() {
  // @@protoc_insertion_point(field_release:tibia.protobuf.map.Npc.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Npc::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tibia.protobuf.map.Npc.name)
}

// optional .tibia.protobuf.shared.Coordinate tile_coordinate = 2;
inline bool Npc::_internal_has_tile_coordinate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tile_coordinate_ != nullptr);
  return value;
}
inline bool Npc::has_tile_coordinate() const {
  return _internal_has_tile_coordinate();
}
inline const ::tibia::protobuf::shared::Coordinate& Npc::_internal_tile_coordinate() const {
  const ::tibia::protobuf::shared::Coordinate* p = tile_coordinate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tibia::protobuf::shared::Coordinate*>(
      &::tibia::protobuf::shared::_Coordinate_default_instance_);
}
inline const ::tibia::protobuf::shared::Coordinate& Npc::tile_coordinate() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Npc.tile_coordinate)
  return _internal_tile_coordinate();
}
inline ::tibia::protobuf::shared::Coordinate* Npc::release_tile_coordinate() {
  // @@protoc_insertion_point(field_release:tibia.protobuf.map.Npc.tile_coordinate)
  _has_bits_[0] &= ~0x00000002u;
  ::tibia::protobuf::shared::Coordinate* temp = tile_coordinate_;
  tile_coordinate_ = nullptr;
  return temp;
}
inline ::tibia::protobuf::shared::Coordinate* Npc::_internal_mutable_tile_coordinate() {
  _has_bits_[0] |= 0x00000002u;
  if (tile_coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::tibia::protobuf::shared::Coordinate>(GetArenaNoVirtual());
    tile_coordinate_ = p;
  }
  return tile_coordinate_;
}
inline ::tibia::protobuf::shared::Coordinate* Npc::mutable_tile_coordinate() {
  // @@protoc_insertion_point(field_mutable:tibia.protobuf.map.Npc.tile_coordinate)
  return _internal_mutable_tile_coordinate();
}
inline void Npc::set_allocated_tile_coordinate(::tibia::protobuf::shared::Coordinate* tile_coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tile_coordinate_);
  }
  if (tile_coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tile_coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tile_coordinate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tile_coordinate_ = tile_coordinate;
  // @@protoc_insertion_point(field_set_allocated:tibia.protobuf.map.Npc.tile_coordinate)
}

// optional uint32 subarea_id = 3;
inline bool Npc::_internal_has_subarea_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Npc::has_subarea_id() const {
  return _internal_has_subarea_id();
}
inline void Npc::clear_subarea_id() {
  subarea_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Npc::_internal_subarea_id() const {
  return subarea_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Npc::subarea_id() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.Npc.subarea_id)
  return _internal_subarea_id();
}
inline void Npc::_internal_set_subarea_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  subarea_id_ = value;
}
inline void Npc::set_subarea_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subarea_id(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.Npc.subarea_id)
}

// -------------------------------------------------------------------

// MapFile

// optional .tibia.protobuf.map.MAP_FILE_TYPE file_type = 1;
inline bool MapFile::_internal_has_file_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MapFile::has_file_type() const {
  return _internal_has_file_type();
}
inline void MapFile::clear_file_type() {
  file_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::tibia::protobuf::map::MAP_FILE_TYPE MapFile::_internal_file_type() const {
  return static_cast< ::tibia::protobuf::map::MAP_FILE_TYPE >(file_type_);
}
inline ::tibia::protobuf::map::MAP_FILE_TYPE MapFile::file_type() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.MapFile.file_type)
  return _internal_file_type();
}
inline void MapFile::_internal_set_file_type(::tibia::protobuf::map::MAP_FILE_TYPE value) {
  assert(::tibia::protobuf::map::MAP_FILE_TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  file_type_ = value;
}
inline void MapFile::set_file_type(::tibia::protobuf::map::MAP_FILE_TYPE value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.MapFile.file_type)
}

// optional .tibia.protobuf.shared.Coordinate top_left_coordinate = 2;
inline bool MapFile::_internal_has_top_left_coordinate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || top_left_coordinate_ != nullptr);
  return value;
}
inline bool MapFile::has_top_left_coordinate() const {
  return _internal_has_top_left_coordinate();
}
inline const ::tibia::protobuf::shared::Coordinate& MapFile::_internal_top_left_coordinate() const {
  const ::tibia::protobuf::shared::Coordinate* p = top_left_coordinate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tibia::protobuf::shared::Coordinate*>(
      &::tibia::protobuf::shared::_Coordinate_default_instance_);
}
inline const ::tibia::protobuf::shared::Coordinate& MapFile::top_left_coordinate() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.MapFile.top_left_coordinate)
  return _internal_top_left_coordinate();
}
inline ::tibia::protobuf::shared::Coordinate* MapFile::release_top_left_coordinate() {
  // @@protoc_insertion_point(field_release:tibia.protobuf.map.MapFile.top_left_coordinate)
  _has_bits_[0] &= ~0x00000002u;
  ::tibia::protobuf::shared::Coordinate* temp = top_left_coordinate_;
  top_left_coordinate_ = nullptr;
  return temp;
}
inline ::tibia::protobuf::shared::Coordinate* MapFile::_internal_mutable_top_left_coordinate() {
  _has_bits_[0] |= 0x00000002u;
  if (top_left_coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::tibia::protobuf::shared::Coordinate>(GetArenaNoVirtual());
    top_left_coordinate_ = p;
  }
  return top_left_coordinate_;
}
inline ::tibia::protobuf::shared::Coordinate* MapFile::mutable_top_left_coordinate() {
  // @@protoc_insertion_point(field_mutable:tibia.protobuf.map.MapFile.top_left_coordinate)
  return _internal_mutable_top_left_coordinate();
}
inline void MapFile::set_allocated_top_left_coordinate(::tibia::protobuf::shared::Coordinate* top_left_coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_left_coordinate_);
  }
  if (top_left_coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      top_left_coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_left_coordinate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  top_left_coordinate_ = top_left_coordinate;
  // @@protoc_insertion_point(field_set_allocated:tibia.protobuf.map.MapFile.top_left_coordinate)
}

// optional string file_name = 3;
inline bool MapFile::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MapFile::has_file_name() const {
  return _internal_has_file_name();
}
inline void MapFile::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MapFile::file_name() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.MapFile.file_name)
  return _internal_file_name();
}
inline void MapFile::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.MapFile.file_name)
}
inline std::string* MapFile::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:tibia.protobuf.map.MapFile.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& MapFile::_internal_file_name() const {
  return file_name_.GetNoArena();
}
inline void MapFile::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapFile::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tibia.protobuf.map.MapFile.file_name)
}
inline void MapFile::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tibia.protobuf.map.MapFile.file_name)
}
inline void MapFile::set_file_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tibia.protobuf.map.MapFile.file_name)
}
inline std::string* MapFile::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapFile::release_file_name() {
  // @@protoc_insertion_point(field_release:tibia.protobuf.map.MapFile.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapFile::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:tibia.protobuf.map.MapFile.file_name)
}

// optional uint32 fields_width = 4;
inline bool MapFile::_internal_has_fields_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MapFile::has_fields_width() const {
  return _internal_has_fields_width();
}
inline void MapFile::clear_fields_width() {
  fields_width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapFile::_internal_fields_width() const {
  return fields_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapFile::fields_width() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.MapFile.fields_width)
  return _internal_fields_width();
}
inline void MapFile::_internal_set_fields_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  fields_width_ = value;
}
inline void MapFile::set_fields_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fields_width(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.MapFile.fields_width)
}

// optional uint32 fields_height = 5;
inline bool MapFile::_internal_has_fields_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MapFile::has_fields_height() const {
  return _internal_has_fields_height();
}
inline void MapFile::clear_fields_height() {
  fields_height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapFile::_internal_fields_height() const {
  return fields_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapFile::fields_height() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.MapFile.fields_height)
  return _internal_fields_height();
}
inline void MapFile::_internal_set_fields_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  fields_height_ = value;
}
inline void MapFile::set_fields_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fields_height(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.MapFile.fields_height)
}

// optional uint32 area_id = 6;
inline bool MapFile::_internal_has_area_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MapFile::has_area_id() const {
  return _internal_has_area_id();
}
inline void MapFile::clear_area_id() {
  area_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapFile::_internal_area_id() const {
  return area_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapFile::area_id() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.MapFile.area_id)
  return _internal_area_id();
}
inline void MapFile::_internal_set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  area_id_ = value;
}
inline void MapFile::set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_area_id(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.MapFile.area_id)
}

// optional double scale_factor = 7;
inline bool MapFile::_internal_has_scale_factor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MapFile::has_scale_factor() const {
  return _internal_has_scale_factor();
}
inline void MapFile::clear_scale_factor() {
  scale_factor_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double MapFile::_internal_scale_factor() const {
  return scale_factor_;
}
inline double MapFile::scale_factor() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.map.MapFile.scale_factor)
  return _internal_scale_factor();
}
inline void MapFile::_internal_set_scale_factor(double value) {
  _has_bits_[0] |= 0x00000040u;
  scale_factor_ = value;
}
inline void MapFile::set_scale_factor(double value) {
  _internal_set_scale_factor(value);
  // @@protoc_insertion_point(field_set:tibia.protobuf.map.MapFile.scale_factor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace map
}  // namespace protobuf
}  // namespace tibia

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tibia::protobuf::map::MAP_FILE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tibia::protobuf::map::MAP_FILE_TYPE>() {
  return ::tibia::protobuf::map::MAP_FILE_TYPE_descriptor();
}
template <> struct is_proto_enum< ::tibia::protobuf::map::AREA_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tibia::protobuf::map::AREA_TYPE>() {
  return ::tibia::protobuf::map::AREA_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_2eproto
